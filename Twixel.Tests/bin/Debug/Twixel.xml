<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Twixel</name>
    </assembly>
    <members>
        <member name="P:TwixelAPI.TwixelErrorEventArgs.ErrorString">
            <summary>
            The error that occurred
            </summary>
        </member>
        <member name="T:TwixelAPI.Twixel">
            <summary>
            Twixel class
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.clientID">
            <summary>
            Your client ID
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.clientSecret">
            <summary>
            Your client secret
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.redirectUrl">
            <summary>
            Your redirect URL
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.nextGames">
            <summary>
            The next games URL
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.maxGames">
            <summary>
            How many games are live on Twitch at the moment
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.nextStreams">
            <summary>
            The next streams URL
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.nextTeams">
            <summary>
            The next teams URL
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.nextVideos">
            <summary>
            The next videos URL
            </summary>
        </member>
        <member name="F:TwixelAPI.Twixel.nextFollows">
            <summary>
            The next follows URL
            </summary>
        </member>
        <member name="M:TwixelAPI.Twixel.#ctor(System.String,System.String,System.String)">
            <summary>
            Twixel constructor
            </summary>
            <param name="id">Your client ID</param>
            <param name="secret">Your client secret</param>
            <param name="url">Your redirect URL, should not have / at end</param>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveTopGames(System.Boolean)">
            <summary>
            Gets games by number of viewers
            </summary>
            <param name="getNext">If this method was called before then this will get the next page of games</param>
            <returns>A list of games (default length 25)</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveTopGames(System.Int32,System.Boolean)">
            <summary>
            Gets games by number of viewers, can specify how many games to get
            </summary>
            <param name="limit">How many streams to get at one time. Default is 25. Maximum is 100</param>
            <param name="hls">If set to true, only returns streams using HLS</param>
            <returns>A list of games</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveStream(System.String)">
            <summary>
            Gets a live stream. If the stream is offline this method will return null.
            </summary>
            <param name="channelName">The channel stream to get</param>
            <returns>A stream object</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveStreams(System.Boolean)">
            <summary>
            Gets the top live streams on Twitch
            </summary>
            <param name="getNext">If this method was called before then this will get the next page of streams</param>
            <returns>A list of streams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveStreams(System.String)">
            <summary>
            Gets the top live streams for the game specified
            </summary>
            <param name="game">The game you want streams for</param>
            <returns>A list of streams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveStreams(System.String,System.Collections.Generic.List{System.String},System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Gets the top live streams on Twitch
            </summary>
            <param name="game">The game you want streams for</param>
            <param name="channels">Streams from a list of channels</param>
            <param name="limit">How many streams to get at one time. Default is 25. Maximum is 100</param>
            <param name="embeddable">If set to true, only returns streams that can be embedded</param>
            <param name="hls">If set to true, only returns streams using HLS</param>
            <returns>A list of streams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveFeaturedStreams">
            <summary>
            Gets the featured live streams on Twitch
            </summary>
            <returns>A list of featured streams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveFeaturedStreams(System.Int32,System.Boolean)">
            <summary>
            Gets the featured live streams on Twitch
            </summary>
            <param name="limit">How many featured streams to get at one time. Default is 25. Maximum is 100</param>
            <param name="hls">If set to true, only returns streams using HLS</param>
            <returns>A list of featured streams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveStreamsSummary">
            <summary>
            Gets a summary of live streams on Twitch
            </summary>
            <returns>A Dictionary with the first key of Viewers and the second key of Channels</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.Login(System.Collections.Generic.List{TwixelAPI.Constants.TwitchConstants.Scope})">
            <summary>
            Creates a URL that can be used to authenticate a user
            </summary>
            <param name="scopes">The permissions you are requesting</param>
            <returns>A URL to be used for authenticating a user</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveUser(System.String)">
            <summary>
            Gets a user by their name
            </summary>
            <param name="name">The name of the user</param>
            <returns>A user</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveChat(System.String)">
            <summary>
            Gets the chat URL's for the specified user
            </summary>
            <param name="user">The name of the user</param>
            <returns>A list of URL's</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveEmoticons">
            <summary>
            Gets the list of emoticons on Twitch
            </summary>
            <returns>A list of emoticons</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.SearchStreams(System.String)">
            <summary>
            Gets a list of live streams based upon a search query
            </summary>
            <param name="query">The search query</param>
            <returns>A list of streams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.SearchStreams(System.String,System.Int32)">
            <summary>
            Gets a list of live streams based upon a search query
            </summary>
            <param name="query">The search query</param>
            <param name="limit">How many streams to get at one time. Default is 25. Maximum is 100</param>
            <returns>A list of streams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.SearchGames(System.String,System.Boolean)">
            <summary>
            Gets a list of games based upon a search query
            </summary>
            <param name="query">The search query</param>
            <param name="live">If true, only returns games that are live on at least one channel</param>
            <returns>A list of searched games</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveTeams(System.Boolean)">
            <summary>
            Gets the list of teams from Twitch
            </summary>
            <param name="getNext">If this method was called before then this will get the next page of teams</param>
            <returns>A list of teams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveTeams(System.Int32)">
            <summary>
            Gets the list of teams from Twitch
            </summary>
            <param name="limit">How many teams to get at one time. Default is 25. Maximum is 100</param>
            <returns>A list of teams</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveTeam(System.String)">
            <summary>
            Gets a team by name
            </summary>
            <param name="name">The name of the team</param>
            <returns>A team</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveVideo(System.String)">
            <summary>
            Gets a video by ID
            </summary>
            <param name="id">The video ID</param>
            <returns>A video</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveTopVideos(System.Boolean)">
            <summary>
            Gets the top videos on Twitch
            </summary>
            <param name="getNext">If this method was called before then this will get the next page of videos</param>
            <returns>A list of videos</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveTopVideos(System.Int32,System.String,TwixelAPI.Constants.TwitchConstants.Period)">
            <summary>
            Gets the top videos on Twitch
            </summary>
            <param name="limit">How many videos to get at one time. Default is 10. Maximum is 100</param>
            <param name="game">The name of the game to get videos for</param>
            <param name="period">The time period you want to look in</param>
            <returns>A list of videos</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveVideos(System.String,System.Boolean)">
            <summary>
            Gets a list of videos for a specified channel
            </summary>
            <param name="channel">The name of the channel</param>
            <param name="getNext">If this method was called before then this will get the next page of videos</param>
            <returns></returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveVideos(System.String,System.Int32,System.Boolean)">
            <summary>
            Gets a list of videos for a specified channel
            </summary>
            <param name="channel">The name of the channel</param>
            <param name="limit">How many videos to get at one time. Default is 10. Maximum is 100</param>
            <param name="broadcasts">Returns only broadcasts when true. Otherwise only highlights are returned. Default is false.</param>
            <returns>A list of videos</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveFollowers(System.String,System.Boolean)">
            <summary>
            Gets a list of users following a specified user
            </summary>
            <param name="user">The name of the user</param>
            <param name="getNext">If this method was called before then this will get the next page of users</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveFollowers(System.String,System.Int32)">
            <summary>
            Gets a list of users following a specified user
            </summary>
            <param name="user">The name of the user</param>
            <param name="limit">How many users to get at one time. Default is 25. Maximum is 100</param>
            <returns>A list of users</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveChannel(System.String)">
            <summary>
            Gets the channel of the specified user
            </summary>
            <param name="name">The name of the user</param>
            <returns>A channel</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveIngests">
            <summary>
            Gets the list of RTMP ingest points
            </summary>
            <returns>A list of ingests</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.RetrieveUserWithAccessToken(System.String)">
            <summary>
            Gets the status of an access token, if the token is valid this returns an
            authorized user object
            </summary>
            <param name="accessToken">The access token</param>
            <returns>An authorized user</returns>
        </member>
        <member name="M:TwixelAPI.Twixel.GoodStatusCode(System.String)">
            <summary>
            Checks to see if the status code returned was 200.
            </summary>
            <param name="response">The response</param>
            <returns>If the status code was ok or not</returns>
        </member>
        <member name="E:TwixelAPI.Twixel.TwixelErrorEvent">
            <summary>
            Twixel error event
            </summary>
        </member>
        <member name="P:TwixelAPI.Twixel.ErrorString">
            <summary>
            Error string, is set when error occurs
            </summary>
        </member>
        <member name="T:TwixelAPI.User">
            <summary>
            User class
            </summary>
        </member>
        <member name="F:TwixelAPI.User.authorized">
            <summary>
            Authorization status
            </summary>
        </member>
        <member name="F:TwixelAPI.User.accessToken">
            <summary>
            User's access token
            </summary>
        </member>
        <member name="F:TwixelAPI.User.authorizedScopes">
            <summary>
            List of scopes user has given permission to
            </summary>
        </member>
        <member name="F:TwixelAPI.User.name">
            <summary>
            Name of the user
            </summary>
        </member>
        <member name="F:TwixelAPI.User.logo">
            <summary>
            User's logo
            </summary>
        </member>
        <member name="F:TwixelAPI.User.id">
            <summary>
            User's ID
            </summary>
        </member>
        <member name="F:TwixelAPI.User.displayName">
            <summary>
            User's public display name
            </summary>
        </member>
        <member name="F:TwixelAPI.User.email">
            <summary>
            User's email address
            </summary>
        </member>
        <member name="F:TwixelAPI.User.staff">
            <summary>
            If the user is a staff member of Twitch
            </summary>
        </member>
        <member name="F:TwixelAPI.User.partnered">
            <summary>
            If the user is partnered with Twitch
            </summary>
        </member>
        <member name="F:TwixelAPI.User.createdAt">
            <summary>
            When the user was created
            </summary>
        </member>
        <member name="F:TwixelAPI.User.updatedAt">
            <summary>
            When the user was last updated
            </summary>
        </member>
        <member name="F:TwixelAPI.User.totalSubscribers">
            <summary>
            The number of subscribers this user has
            </summary>
        </member>
        <member name="F:TwixelAPI.User.streamKey">
            <summary>
            User's stream key
            </summary>
        </member>
        <member name="F:TwixelAPI.User.bio">
            <summary>
            User's bio
            </summary>
        </member>
        <member name="F:TwixelAPI.User.nextSubs">
            <summary>
            Next subscribers URL
            </summary>
        </member>
        <member name="F:TwixelAPI.User.nextFollowing">
            <summary>
            Next following URL
            </summary>
        </member>
        <member name="F:TwixelAPI.User.nextFollowingStreams">
            <summary>
            Next following streams URL
            </summary>
        </member>
        <member name="M:TwixelAPI.User.RetrieveOnlineFollowedStreams">
            <summary>
            Gets a list of live streams that the user is following. Requires user authorization.
            </summary>
            <returns>A list of streams</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveBlockedUsers">
            <summary>
            Gets a list of users that the user has blocked. Requires user authorization.
            </summary>
            <returns>A list of users</returns>
        </member>
        <member name="M:TwixelAPI.User.BlockUser(System.String)">
            <summary>
            Blocks a user. Requires user authorization.
            </summary>
            <param name="username">The name of the user to block</param>
            <returns>The current list of blocked users</returns>
        </member>
        <member name="M:TwixelAPI.User.UnblockUser(System.String)">
            <summary>
            Unblocks a user. Requires user authorization.
            </summary>
            <param name="username">The name of the user to block</param>
            <returns>The current list of blocked users</returns>
        </member>
        <member name="M:TwixelAPI.User.RetriveSubscribers(System.Boolean)">
            <summary>
            Gets a list of users subscribed to this user. Requires user authorization. Requires Twitch partnership.
            </summary>
            <param name="getNext">If this method was called before then this will get the next page of subscriptions</param>
            <returns>A list of subscriptions</returns>
        </member>
        <member name="M:TwixelAPI.User.RetriveSubscribers(System.Int32,TwixelAPI.Constants.TwitchConstants.Direction)">
            <summary>
            Get a list of users subscribed to this user. Requires user authorization. Requires Twitch partnership.
            </summary>
            <param name="limit">How many subscriptions to get at one time. Default is 25. Maximum is 100</param>
            <param name="direction">Creation date sorting direction</param>
            <returns>A list of subscriptions</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveSubsciber(System.String)">
            <summary>
            Checks to see if a specified user is subscribed to this user. Requires user authorization. Requires Twitch partnership.
            </summary>
            <param name="username">The name of the user</param>
            <returns>A subscription object if the user is subscribed</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveSubscription(System.String)">
            <summary>
            Checks to see if this user is subcribed to a specified channel. Requires user authorization.
            </summary>
            <param name="channel">The name of the channel</param>
            <returns>A subscription object</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveFollowing(System.Boolean)">
            <summary>
            Gets a list of channels this user is following
            </summary>
            <param name="getNext">If this method was called before then this will get the next page of channels</param>
            <returns>A list of channels</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveFollowing(System.Int32)">
            <summary>
            Gets a list of channels this user is following
            </summary>
            <param name="limit">How many channels to get at one time. Default is 25. Maximum is 100</param>
            <returns>A list of channels</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveFollowing(System.String)">
            <summary>
            Checks to see if this user is following a specified channel
            </summary>
            <param name="channel">The name of the channel</param>
            <returns>A channel object</returns>
        </member>
        <member name="M:TwixelAPI.User.FollowChannel(System.String)">
            <summary>
            Follows a channel. Requires user authorization.
            </summary>
            <param name="channel">The name of the channel</param>
            <returns>A channel object</returns>
        </member>
        <member name="M:TwixelAPI.User.UnfollowChannel(System.String)">
            <summary>
            Unfollows a channel. Requires user authorization.
            </summary>
            <param name="channel">The name of the channel</param>
            <returns>If the request succeeded</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveChannel">
            <summary>
            Gets the channel object for this user. Requires user authorization.
            </summary>
            <returns>A channel object</returns>
        </member>
        <member name="M:TwixelAPI.User.RetrieveChannelEditors">
            <summary>
            Gets the list of users that can edit this user's channel. Requires user authorization.
            </summary>
            <returns>A list of users</returns>
        </member>
        <member name="M:TwixelAPI.User.UpdateChannel(System.String,System.String)">
            <summary>
            Updates a channel's status. Requires user authorization.
            </summary>
            <param name="status">The new status</param>
            <param name="game">The new game</param>
            <returns></returns>
        </member>
        <member name="M:TwixelAPI.User.ResetStreamKey">
            <summary>
            Resets this user's stream key. Requires user authorization.
            </summary>
            <returns>The new stream key</returns>
        </member>
        <member name="M:TwixelAPI.User.StartCommercial(TwixelAPI.Constants.TwitchConstants.Length)">
            <summary>
            Starts a commercial on this user's live stream. Requires user authorization. Requires Twitch partnership
            </summary>
            <param name="length">The length of the commercial</param>
            <returns>If the request succeeded</returns>
        </member>
    </members>
</doc>
